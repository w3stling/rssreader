plugins {
    id 'java-library'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id 'biz.aQute.bnd.builder' version '7.1.0'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    id 'org.sonarqube' version '6.3.1.5724'
}

group = 'com.apptasticsoftware'
version = "${version}"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.13.4")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation('com.github.npathai:hamcrest-optional:2.0.0')
    testImplementation('org.hamcrest:hamcrest:3.0')
    testImplementation('org.mockito:mockito-core:5.18.0')
    testImplementation('nl.jqno.equalsverifier:equalsverifier:4.0.7')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

ext.moduleName = 'com.apptasticsoftware.rssreader'

compileJava {
    options.encoding = "UTF-8"
    inputs.property('moduleName', moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

jar {
    manifest {
        attributes(
                "Build-Jdk-Spec": java.targetCompatibility,
                "Implementation-Title": "RSS Reader",
                "Implementation-Version": version,
                "Specification-Title": "RSS Reader",
                "Specification-Version": version.replace("-SNAPSHOT", ""),
                "Automatic-Module-Name": moduleName,
                "Bundle-SymbolicName": moduleName,
                "Bundle-Description": "Java library for reading RSS and Atom feeds",
                "Bundle-License": "https://opensource.org/licenses/MIT",
                "Bundle-Name": "RSS Reader",
                "Export-Package": "*;-split-package:=merge-first;-noimport:=true",
        )
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'RSS Reader'
                description = 'Java library for reading RSS and Atom feeds'
                url = 'https://github.com/w3stling/rssreader'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/w3stling/rssreader/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'w3stling'
                        name = 'Apptastic Software'
                        email = 'apptastic.software@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/w3stling/rssreader'
                    connection = 'scm:git://github.com/w3stling/rssreader.git'
                    developerConnection = 'scm:git:ssh://github.com/w3stling/rssreader.git'
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

sonar {
    properties {
        property "sonar.projectKey", "w3stling_rssreader"
        property "sonar.organization", "w3stling"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}